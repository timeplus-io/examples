CREATE STREAM Orders
(
  `OrderId` string DEFAULT uuid(),
  `Symbol` string,
  `Side` string,
  `OrderQty` float32,
  `OrderType` string,
  `Price` float32
);

CREATE AGGREGATE FUNCTION order_execute(Time datetime64, OrderId string, Symbol string, Side string, OrderQty float32, OrderType string, Price float32)
RETURNS tuple(Time datetime64, BuyId string, SellId string, Symbol string, Price float32, Qty float32) LANGUAGE JAVASCRIPT AS $$
{
  has_customized_emit: true,

  initialize: function () {
    // keep history of all orders with hashmap, 
    // first layer key is side, 
    // second layer key is symbol,
    // third layer key is price
    this.orders = {
      'buy': {},
      'sell': {}
    };
    this.executions = []; // executions generated by current batch of orders
    this.order_sequence = []; // sequence of orders generated by current batch
  },

  process: function (Time, OrderId, Symbol, Side, OrderQty, OrderType, Price) {
    const executions = [];
    const current_time = new Date();
    for (let i = 0; i < OrderId.length; i++) {
      const current_order = {
        Time: Time[i],
        OrderId: OrderId[i],
        Symbol: Symbol[i],
        Side: Side[i],
        OrderQty: OrderQty[i],
        OrderType: OrderType[i],
        Price: Price[i],
        Status: "Pending",
        FilledQty: 0,
        AvailableQty: OrderQty[i],
      };

      if (!this.orders[current_order.Side].hasOwnProperty(current_order.Symbol)) {
        // create entry for symbol
        this.orders[current_order.Side][current_order.Symbol] = {};
      }

      if (!this.orders[current_order.Side][current_order.Symbol].hasOwnProperty(current_order.Price)) {
        // create orders for specific price
        this.orders[current_order.Side][current_order.Symbol][current_order.Price] = [];
      }

      // append current order to the queue of the order map
      this.orders[current_order.Side][current_order.Symbol][current_order.Price].push(current_order);

      // copy current order into order sequence
      this.order_sequence.push({ ...current_order });

      while (true) {
        const other_side = current_order.Side === 'sell' ? 'buy' : 'sell';
        // no any order with same price on the other side
        if (!this.orders[other_side].hasOwnProperty(current_order.Symbol)) {
          break;
        }

        if (!this.orders[other_side][current_order.Symbol].hasOwnProperty(current_order.Price)) {
          break;
        }

        if (this.orders[other_side][current_order.Symbol][current_order.Price].length == 0) {
          break;
        }

        let match_order = this.orders[other_side][current_order.Symbol][current_order.Price][0];

        if (!current_order.AvailableQty > 0) {
          break;
        }

        let execution_qty = 0;
        if (match_order.AvailableQty > current_order.AvailableQty) {
          execution_qty = current_order.AvailableQty;
          match_order.AvailableQty -= execution_qty;
          match_order.FilledQty += execution_qty;
          match_order.Status = "Partially Filled";
          current_order.FilledQty = current_order.OrderQty;
          current_order.AvailableQty = 0;
          current_order.Status = "Filled";
        } else if (match_order.AvailableQty < current_order.AvailableQty) {
          execution_qty = match_order.AvailableQty;
          current_order.FilledQty += execution_qty;
          current_order.AvailableQty -= execution_qty;
          current_order.Status = "Partially Filled";
          match_order.Status = "Filled";
          match_order.AvailableQty = 0;
          match_order.FilledQty = match_order.OrderQty;
        } else {
          execution_qty = current_order.OrderQty;
          match_order.AvailableQty = 0;
          match_order.FilledQty = match_order.OrderQty;
          match_order.Status = "Filled";
          current_order.FilledQty = current_order.OrderQty;
          current_order.AvailableQty = 0;
          current_order.Status = "Filled";
        }

        // add updated buy/sell order to sequence
        const match_order_update = { ...match_order };
        match_order_update.Time = current_time;

        this.order_sequence.push(match_order_update);
        this.order_sequence.push({ ...current_order });

        if (current_order.Side === "buy") {
          executions.push({
            Time: current_time,
            BuyId: current_order.OrderId,
            SellId: match_order.OrderId,
            Symbol: current_order.Symbol,
            Price: current_order.Price,
            Qty: execution_qty,
          });
        } else {
          executions.push({
            Time: current_time,
            BuyId: match_order.OrderId,
            SellId: current_order.OrderId,
            Symbol: current_order.Symbol,
            Price: current_order.Price,
            Qty: execution_qty,
          });
        }

        // remove filled orders 
        if (match_order.Status === 'Filled') {
          this.orders[other_side][current_order.Symbol][current_order.Price] = this.orders[other_side][current_order.Symbol][current_order.Price].slice(1);
        }
      
        if ( current_order.Status === "Filled" ) {
          this.orders[current_order.Side][current_order.Symbol][current_order.Price] = this.orders[current_order.Side][current_order.Symbol][current_order.Price].slice(0, -1);
        }
      }
    }
    this.executions = executions;
    return this.executions.length;
  },

  finalize: function () {
    const result = this.executions;
    const orders = this.order_sequence;
    this.executions = [];
    this.order_sequence = [];
    return result;
  },
}
$$;

-- v_order_execution
WITH o AS
  (
    SELECT
      order_execute(_tp_time, OrderId, Symbol, Side, OrderQty, OrderType, Price) AS Orders
    FROM
      Orders
  )
SELECT
  Orders.1 AS Time, Orders.2 AS BuyId, Orders.3 AS SellId, Orders.4 AS Symbol, Orders.5 AS Price, Orders.6 AS Qty
FROM
  o;


-- Batch 1
INSERT INTO Orders (OrderId, Symbol, Side, OrderQty, OrderType, Price)
VALUES 
  ('o1', 'A', 'buy', 200, 'LIMIT', 1.0),
  ('o2', 'A', 'sell', 100, 'LIMIT', 1.0),
  ('o3', 'A', 'buy', 200, 'LIMIT', 1.0),
  ('o4', 'A', 'sell', 200, 'LIMIT', 1.0);

-- Batch 2
INSERT INTO Orders (OrderId, Symbol, Side, OrderQty, OrderType, Price)
VALUES 
  ('o5', 'A', 'buy', 200, 'LIMIT', 1.0),
  ('o6', 'A', 'sell', 100, 'LIMIT', 1.0),
  ('o7', 'A', 'buy', 200, 'LIMIT', 1.0),
  ('o8', 'A', 'sell', 200, 'LIMIT', 1.0);

