[sources.docker_logs]
type = "docker_logs"
exclude_containers = ["vector", "otel-collector", "redpanda"]

[sources.generate_syslog]
type = "demo_logs"
format = "syslog"
count = 100000
interval = 1

[transforms.remap_syslog]
inputs = ["generate_syslog"]
type = "remap"
source = """
syslog = parse_syslog!(.message)

severity_text = if includes(["emerg", "err", "crit", "alert"], syslog.severity) {
    "ERROR"
} else if syslog.severity == "warning" {
    "WARN"
} else if syslog.severity == "debug" {
    "DEBUG"
} else if includes(["info", "notice"], syslog.severity) {
    "INFO"
} else {
    syslog.severity
}

.resourceLogs = [{
    "resource": {
        "attributes": [
            { "key": "source_type", "value": { "stringValue": .source_type } },
            { "key": "service.name", "value": { "stringValue": syslog.appname } },
            { "key": "host.hostname", "value": { "stringValue": syslog.hostname } }
        ]
    },
    "scopeLogs": [{
        "scope": {
            "name": syslog.msgid
        },
        "logRecords": [{
            "timeUnixNano": to_unix_timestamp!(syslog.timestamp, unit: "nanoseconds"),
            "body": { "stringValue": syslog.message },
            "severityText": severity_text,
            "attributes": [
                { "key": "syslog.procid", "value": { "stringValue": to_string(syslog.procid) } },
                { "key": "syslog.facility", "value": { "stringValue": syslog.facility } },
                { "key": "syslog.version", "value": { "stringValue": to_string(syslog.version) } }
            ]
        }]
    }]
}]

del(.message)
del(.timestamp)
del(.service)
del(.source_type)
"""

[transforms.remap_dockerlog]
inputs = ["docker_logs"]
type = "remap"
source = """
# Parse timestamp first
.timestamp = parse_timestamp!(.timestamp, format: "%+")  # Assuming RFC3339 format from Docker

# Map severity based on stream type (stderr -> ERROR, stdout -> INFO)
severity_text = "INFO"

.resourceLogs = [{
    "resource": {
        "attributes": [
            { "key": "source_type", "value": { "stringValue": .source_type } },
            { "key": "service.name", "value": { "stringValue": .container_name } },
            { "key": "host.hostname", "value": { "stringValue": get_hostname!() } }
        ]
    },
    "scopeLogs": [{
        "scope": {
            "name": "docker_logs"  # Default value since msgid isn't available in Docker logs
        },
        "logRecords": [{
            "timeUnixNano": to_unix_timestamp(.timestamp, unit: "nanoseconds"),
            "body": { "stringValue": .message },
            "severityText": severity_text,
            "attributes": [
                { "key": "container.id", "value": { "stringValue": .container_id } },
                { "key": "container.name", "value": { "stringValue": .container_name } },
                { "key": "log.stream", "value": { "stringValue": .stream } }
            ]
        }]
    }]
}]

# Cleanup unused fields
del(.message)
del(.timestamp)
del(.source_type)
del(.container_id)
del(.container_name)
del(.stream)
"""


# Send logs to OpenTelemetry
[sinks.otel]
type = "opentelemetry"
inputs = ["remap_dockerlog"]
protocol.encoding.codec = "json"
protocol.type = "http"
protocol.method = "post"
protocol.uri = "http://otel-collector:4318/v1/logs"
protocol.framing.method = "newline_delimited"
protocol.headers.content-type = "application/json"


# Debug sink to print logs to stdout
# [sinks.console]
# type = "console"
# inputs = ["remap_syslog"]
# encoding.codec = "json"  # Ensure structured log output